/*slist,节点有父类的next指针和子类的data组成，只能指向下一个节点，前向，iterator由父类的node指向节点基类的next和子类构成
slist类最重要的是head base节点，他没有数据只有next指针指向第一个元素，begin函数直接返回head节点的next，front也是利用head
swap更夸张，直接将两个head指向换一下就行，empty也是判断head的next==0，push_front先creat一个节点再调用全局函数往开头插入
__slist_make_link全局函数可以将节点插入节点后面而不是前面，pop_front也可以利用head做到，不能往后面pop，push，  
end函数很抽象，最终返回一个迭代器指向0，这个0不是一个节点，却由最后一个节点的next指针也指向它，end也返回指向它的指针*/
#pragma once
//slist占用空间更小，某些操作更快
//重要，STL习惯，insert插入之前而不是之后，但是forwarditerator不能回头定出一个位置
//，所以不要用slist的insert和erase和push_back
//节点和迭代器采用继承，复杂
struct __slist_node_base {
	__slist_node_base* next;//node基类只有一个next指针
};
template<typename T>
struct __slist_node :public __slist_node_base {
	T data;//节点有基类的next指针和派生类的数据
};
struct __slist_iterator_base {
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef forward_iterator_tag iterator_catagroy;

	__slist_iterator_base(__slist_node_base*x):node(x){}
	bool operator==(const __slist_iterator_base& x)const { return node == x.node; }//迭代器是否等同看node指向的node是否同
	bool operator!=(const __slist_iterator_base& x)const { return node != x.node; }

	void incr() { node = node->next; }//node指向的节点的next指向的下一个节点被node指向

	__slist_node_base* node;//node是指向节点的指针的指针
};
template<typename T,typename Ref,typename Ptr>
struct __slist_iterator :public __slist_iterator_base {
	typedef __slist_iterator<T, T&, T*> iterator;
	typedef __slist_iterator<T, const T&, const T*> const_iterator;
	typedef __slist_iterator<T, Ref, Ptr> self;
	typedef T value_type;
	typedef Ref reference;
	typedef Ptr pointer;
	typedef __slist_node<T> list_node;

	__slist_iterator(list_node&x):__slist_iterator_base(x){}
	__slist_iterator():__slist_iterator_base(0){}
	__slist_iterator(const iterator& x) :__slist_iterator_base(x.node) {};
	reference operator*()const { return ((list_node*)node)->data; }
	pointer operator->()const { return&(operator*()); }
	self operator++() {
		incr();
		return *this;
	}
	self operator++(int) {
		self tmp = *this;
		incr();
		return tmp;
	}//没有--因为前向迭代器
};
template<typename T,typename Alloc=alloc>
class slist {
public:
	typedef T value_type;
	typedef T* pointer;
	typedef const T* const_pointer;
	typedef T& reference;
	typedef const T& const_reference;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef __slist_iterator<T, T&, T*> iterator;
	typedef __slist_iterator<T, const T&, const T*>const_iterator;

	slist() { head.next = 0; }
	~slist() { clear(); }

	iterator begin() { return iterator((list_node*)head.next); }//不是指向head而是head之后的第一个节点
	iterator end() { return iterator(0); }//iterator(0)=__slist_iterator<T,T&,T*>(0)临时对象=__slist_iterator_base
	//(0)=node(0),看图，最后生成一个迭代器指向0，这个0就是end
	size_type size()const { return __slist_size(head.next); }
	bool empty()const { return head.next == 0; }
	void swap(slist& L) {
		list_node_base* tmp = head.next;
		head.next = L.head.next;//slist的头结点十分重要head，交换时两个链表只要头结点指向对方剩余节点
		L.head.next = tmp;
	}
	reference front() { return ((list_node*)head.next)->data; }//还是头结点下一个节点的data就是front
	void push_front(const value_type& x) {
		__slist_make_link(&head, creat_node(x));//输入一个节点和头，给你push,没有pushback，因为无法返回插入后前一个位置
	}//虽然无法往前，但是head之后就是前，利用head间接实现前
	void pop_front() {
		list_node* node = (list_node*)head.next;//node指针保存第一个元素
		head.next = node->next;//head的下一个元素变为node的下一个元素，这样node，原本的front就被抛弃了
		destroy_node(node);
	}

private:
	typedef __slist_node<T> list_node;
	typedef __slist_node_base list_node_base;
	typedef __slist_iterator_base iterator_base;
	typedef simple_alloc<list_node, Alloc> list_node_allocator;
	
	static list_node* creat_node(const value_type& x) {
		list_node* node = list_node_allocator::allocate();//node指向节点的指针，配置节点
		__STL_TRY{
			construct(&(node->data),x);
		node->next = 0;
		}
		__STL_UNWIND(list_node_allocator::deallocate(node)) { return node; }
	}
	static void destroy_node(list_node* node) {
		destroy(&node->data);
		list_node_allocator::deallocate(node);
	}

	list_node_base head;//头部节点不是指针
};
inline __slist_node_base* __slist_make_link(__slist_node_base* prev_node, __slist_node_base* new_node) {
	new_node->next = prev_node->next;
	prev_node->next = new_node;
	return new_node;//插入新节点在后面，不能之前因为是forward迭代器，返回新节点
}
inline size_t __slist_size(__slist_node_base* node) {//node是指向node的一个指针，一开始就指向第一个
	size_t result = 0;
	for (; node != 0; node = node->next) {
		++result;
		return result;
	}
}
