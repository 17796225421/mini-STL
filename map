#pragma once
//不可以修改map元素因为可能会改到键值所以不是mutable迭代器，可以修改实值所以也不是const
template<typename T1,typename T2>
struct pair {
	typedef T1 first_type;
	typedef T2 second_type;

	pair():first(T1()),second(T2()){}
	pair(const T1& a, const T2& b) :first(a), second(b) {}

	T1 first;
	T2 second;
};
template<typename Key,typename T,typename Compare=less<Key>,typename Alloc=alloc>
class map {
	friend bool operator== STL_NULL_TMPL_ARGS(const map&, const map&);
	friend bool operator< STL_NULL_TMPL_ARGS(const map&, const map&);
public:
	typedef Key key_type;
	typedef T data_type;
	typedef T mapped_type;
	typedef pair<const Key, T> value_type;//key/data
	typedef Compare key_compare;
	typedef typename rep_type::pointer pointer;
	typedef typename rep_type::const_pointer const_pointer;
	typedef typename rep_type::reference reference;
	typedef typename rep_type::const_reference const_reference;
	typedef typename rep_type::iterator iterator;//iterator是可修改的不行set
	typedef typename rep_type::const_iterator const_iterator;
	typedef typename rep_type::reverse_iterator reverse_iterator;
	typedef typename rep_type::const_reverse_iterator const_reverse_iterator;
	typedef typename rep_type::size_type size_type;
	typedef typename rep_type::differece_type difference_type;

	map() :t(Compare()) {}
	explicit map(const Compare& comp) :t(comp) {}
	template<typename InputIterator>
	map(InputIterator first, InputIterator last) : t(Compare()) { t.insert_unique(first, last); }//不重复
	map(InputIterator first, InputIterator last, const Compare& comp) : t(comp) { t.insert_unique(first, last); }
	map(const map<Key, T, Compare, Alloc>& x) :t(x.t) {}
	map<Key, T, Compare, Alloc>& operator=(const map<Key, T, Compare, Alloc>& x)const {
		t = x.t;
		return *this;
	}

	class value_compare :public binary_function<value_type, value_type, bool> {
		friend class map<Key, T, Compare, Alloc>;
	public:
		bool operator()(const value_type& x, const value_type& y)const { return comp(x.first, y.first); }
	protected:
		compare comp;
		value_compare(Compare c) :comp(c) {}
	};
	key_compare key_comp()const { return t.key_comp(); }
	value_compare value_comp()const { return value_compare(t.key_comp()); }
	iterator begin() { return t.begin(); }
	const_iterator begin()const { return t.begin(); }
	iterator end() { return t.end(); }
	const_iterator end()const { return t.end(); }
	reverse_iterator rbegin() { return t.rbegin(); }
	const_reverse_iterator rbegin()const { return t.rbegin(); }
	reverse_iterator rend() { return t.rend(); }
	const_reverse_iterator rend()const { return t.rend(); }
	bool empty()const { return t.empty(); }
	size_type size()const { return t.size(); }
	size_type max_size()const { return t.max_size(); }
	T& operator[]const(const key_type& k){
		//给个键值返回个实值
		return (*((insert(value_type(k, T()))).first)).second;//从中间看，先用k和实值T()创建一个元素，插入map,
		//返回pair，迭代器和bool，返回迭代器。*迭代器得到插入的节点，是个pair，Key和value，返回value，以引用方式，
		//作为左值右值都可以，左值则是用引用对象的地址，右值则是用引用对象的值
	}
	void swap(map<Key, T, Compare, Alloc>& x) { t.swap(x.t); }
	pair<iterator, bool> insert(const value_type& x) {
		return t.insert_unique(x);
	}
	iterator insert(iterator position, const value_type& x) {
		return t.insert_unique(position, x);
	}
	template<typename InputIterator>
	iterator insert(InputIterator first, InputIterator last) {
		return t.insert(first, last);
	}
	void erase(iterator position) { return t.erase(position); }
	size_type erase(const key_type& k) { return t.erase(k); }
	void erase(iterator first, iterator last) { t.erase(first, last); }
	void clear() { t.clear(); }
	iterator find(const key_type& k) { return t.find(k); }
	const_iterator find(const key_type& k)const { return t.find(k); }
	size_type count(const key_type& k)const { return t.count(k); }
	iterator lower_bound(const key_type& k) { return t.lower_bound(k); }
	const_iterator lower_bound(const key_type& k)const { return t.lower_bound(k); }
	iterator upper_bound(const key_type& k) { return t.upper_bound(k); }
	const_iterator upper_bound(const key_type& k)const { return t.upper_bound(k); }
	pair<iterator, iterator> equal_range() { return t.equal_range(); }
	pair<const_iterator,const_iterator> equal_range()const { return t.equal_range(); }

private:
	typedef rb_tree<key_type, value_type, select1st<value_type>, key_compare, Alloc> rep_type;

	rep_type t;//红黑树t表现map
};
template<typename Key,typename T,typename Compare,typename Alloc>
inline bool operator== (const map<Key, T, Compare, Alloc>& x, const map<Key, T, Compare, Alloc>& y) { return x.t == y.t; }
template<typename Key, typename T, typename Compare, typename Alloc>
inline bool operator< (const map<Key, T, Compare, Alloc>& x, const map<Key, T, Compare, Alloc>& y) { return x.t < y.t; }
