#pragma once
template <typename T,typename Sequence=deque<T>>
class queue {
	friend bool operator== __STL_NULL_TMPL_ARGS(const queue& x, const queue& y);
	friend bool operator< __STL_NULL_TMPL_ARGS(const queue& x, const queue& y);
public:
	typedef typename Sequence::value_type value_type;
	typedef typename Sequence::size_type size_type;
	typedef typename Sequence::reference reference;
	typedef typename Sequence::const_reference const_reference;

	bool empty()const { return c.empty(); }
	size_type size()const { return c.size(); }//const成员函数既不能调用非const成员函数也不能修改成员变量，提高健壮性
	reference front() { return c.front(); }
	const_reference front()const { return c.front(); }
	reference back() { return c.back(); }
	const_reference back()const { return c.back(); }
	void push(const value_type& x) { return c.push_back(); }//末端进，前端出
	void pop() { return c.pop.front(); }
protected:
	Sequence c;
};
template<typename T,typename Sequence>
bool operator==(const queue<T,Sequence>&x,const queue<T,Sequence>&y) {
	return x.c == y.c;
}
template<typename T,typename Sequence>
bool operator<(const queue<T, Sequence>& x, const queue<T, Sequence>& y) {
	return x.c < y.c;
}
