/*set，利用底层红黑树，特点是键值和value一样，且不可改变，所以都是const，multset只有insert_equal不一样其他一样*/
#pragma once
template<typename Key, typename Compare = less<Key>, typename Alloc = alloc>
class set {
	friend bool operator==__STL_NULL_TMPL_ARGS(const set&, const set&);
	friend bool operator< __STL_NULL_TMPL_ARGS(const set&, const set&);
public:
	typedef Key key_type;
	typedef Key value_type;
	typedef Compare key_compare;
	typedef Compare value_compare;
	typedef typename rep_type::const_pointer pointer;
	typedef typename rep_type::const_pointer const_pointer;
	typedef typename rep_type::const_reference reference;
	typedef typename rep_type::const_reference const_reference;
	typedef typename rep_type::const_iterator iterator;//全部const，不可修改键值，打乱set结构
	typedef typename rep_type::const_iterator const_iterator;
	typedef typename rep_type::const_reverse_iterator reverse_iterator;
	typedef typename rep_type::const_reverse_iterator const_reverse_iterator;
	typedef typename rep_type::size_type size_type;
	typedef typename rep_type::difference_type difference_type;
	typedef pair<iterator, bool> pair_iterator_bool;

	//set使用insert_unique,multset使用另一个
	set() :t(Compare()) {}
	explicit set(const Compare& comp) :t(comp) {}
	template<typename InputIterator>
	set(InputIterator first, InputIterator last) : t(Compare()) { t.insert_unique(first, last); }
	//multset换成insert_equal
	template<typename InputIterator, typedef Compare>
	set(InputIterator first, InputIterator last, const Compare& comp) : t(comp) { t.insert_unique(first, last); }
	//multset换成insert_equal
	set(const set<Key, Compare, Alloc>& x) :t(x.t) {}
	set<Key, Compare, Alloc>& operator=(const set<Key, Compare, Alloc>& x) {
		t = x.t;
		return *this;
	}

	key_compare key_comp()const { return t.key_comp(); }
	key_compare value_comp()const { return t.key_comp(); }//set key和value相同，所以两者函数都是一样，名字不一样而已
	iterator begin()const { return t.begin(); }
	iterator end()const { return t.end(); }
	reverse_iterator rbegin()const { return t.rbegin(); }
	reverse_iterator rend()const { return t.rend(); }
	bool empty()const { return t.empty(); }
	size_type size()const { return t.size(); }
	size_type max_size()const { return t.max_size(); }
	void swap(set<Key, Compare, Alloc>& x) { t.swap(x.t); }
	pair_iterator_bool insert(const value_type& x) {
		pair<typename rep_type::iterator, bool>p = t.insert_unique(x);
		return pair_iterator_bool(p.first, p.second);
	}
	iterator insert(iterator position, const value_type& x) {
		typedef typename rep_type::iterator rep_iterator;
		return t.insert_unique((rep_iterator&)position, x);
	}
	template<typename InputIterator>
	void insert(InputIterator first, InputIterator last) { t.insert_unique(first, last); }
	void erase(iterator position) {
		typedef typename rep_type::iterator rep_iterator;
		t.erase((rep_iterator&)position);
	}
	//multset换成insert_equal
	void erase(iterator first, iterator last) {
		typedef typename rep_type::iterator rep_iterator;
		t.erase((rep_iterator&)first, (rep_iterator&)last);
	}
	void erase(const key_type& x) { return t.erase(x); }
	void clear() { t.clear; }
	iterator find(const key_type& k)const { return t.find(k); }
	size_type count(const key_type& k)const { return t.count(k); }
	iterator lower_bound(const key_type& k)const { return t.lower_bound(k); }
	iterator upper_bound(const key_type& k)const { return t.upper_bound(k); }
	pair<iterator, iterator> equal_range(const key_type& x)const { return t.equal_range(x); }

private:
	typedef rb_tree<key_type, value_type, identity<value_type>, key_compare, Alloc> rep_type;

	rep_type t;//红黑树表现set,set有且只有一个数据成员t，类型是红黑树
};
template<typename Key, typename Compare, typename Alloc>
inline bool operator==(const set<Key, Compare, Alloc>& x, const set<Key, Compare, Alloc>& y) { return x.t == y.t; }
template<typename Key, typename Compare, typename Alloc>
inline bool operator==(const set<Key, Compare, Alloc>& x, const set<Key, Compare, Alloc>& y) { return x.t < y.t; }
