/*vector,public中先是typedef，接着构造析构函数，接着一大堆函数接口，protected中显示typedef指出迭代器，接着是
一堆辅助public函数的函数，接着是几个数据成员，还有全局函数辅助类内所有函数。细节是用typedef内嵌声明，细节是
push_back考虑容量不够的时候调用辅助函数insert_aux，细节是erase重载了接受1个或2个迭代器，细节是构造函数调用了fill_initialized
fill_initialize又调用了alloc_and_fill，alloc_and_fill又调用了全局函数initialized_fill_n，细节是insert_aux要考虑
容量不够，细节是insert非常难，代码多类外实现，配合图举例*/
#pragma once
template<typename T,typename Alloc=alloc>//缺省使用配置器
class vector
{
public://typedef区，构造析构区，接口函数区
	typedef T value_type;
	typedef T* pointer;
	typedef T* iterator;//迭代器是普通指针
	typedef T& reference;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	vector() :start(0), finish(0), end_of_storage(0) {}
	vector(size_type n, const T& value) { fill_initialize(n, value); }
	vector(int n, const T& value) { fill_initialize(n, value); }
	vector(long n, const T& value) { fill_initialize(n, value); }
	explicit vector(size_type n) { fill_initialize(n, T()); }
	~vector() {
		destroy(start, finish);//五大全局函数
		deallocate();//vector成员函数靠的是空间配置器的deallocate
	}

	iterator begin() { return start; }
	iterator end() { retuen finish; }
	size_type size()const { return size_type(end() - begin()); }//显式类型转化
	size_type capacity()const { return size_type(end_of_storage - begin()); }
	bool empty()const { return begin() == end(); }
	reference operator[] (size_type n) { return *(begin() + n); }
	reference front() { return *begin(); }
	reference back() { return *(finish() - 1); }
	void push_back(const T& x){
		if (finish != end_of_storage)
		{
			construct(finish, x);
			++finish;
		}
		else {
			insert_aux(end(), x);//辅助函数全部放在private的函数区
		}
	}
	void pop_back() {
		--finish;
		destroy(finish);
	}
	iterator erase(iterator first, iterator last) {
		iterator i = copy(last, finish, first);
		destroy(i, finish);
		finish = finish - (last - first);//finish向左移动a距离，a距离为last和first之间的距离
		return first;
	}
	iterator erase(iterator position) {
		if (position + 1 != finish) {
			copy(position + 1, finish, position);
			--finish;
			destroy(finish);
			return position;
		}
	}
	void clear() { earse(begin(), end()); }
	void insert(iterator positon, value_type n, const T& x);
	void resize(value_type new_size, const T& x);
	void resize(value_type new_size);

protected://typedef区是迭代器，函数区是实现函数(类似于全局函数都是拿来辅助的），数据区
	typedef simple_alloc<value_type, Alloc>data_allocator;//vector 的迭代器
//根据typedef T* iterator 如果vector<神马>::iterator it;it的类型就是神马*

	void deallocate();
	void fill_ininialize(size_type n, const T& value) {
		start = allocate_and_fill(n, value);
		finish = start + n;
		end_of_storage = finish;
	}
	iterator alloc_and_fill(size_type n, const T& x){
		iterator result = data_allocate::allocate(n);
		uninalized_fill_n(result, n, x);//根据result特性使用type_traits
		return result;
	}
	void insert_aux(iterator position, const T& x) {
		if (finish != end_of_storage) {
			construct(finish, *(finish - 1));
			++finish;
			T x_copy = x;
			copy_backword(position, finish - 2, finish - 1);
			*position = x_copy;
		}
		else {//重新配置，移动数据，释放原空间
			const size_type old_size = size();
			const size_type len = old_size != 0 ? 2 * old_size : 1;
			iterator new_start = data_allocator::allocate(len);//重新配置
			iterator new_finish = new_start;
			try {
				new_finish = uninialized_copy(start, position, new_start);//移动数据
				construct(new_finish, x);
				++new_finish;
				new_finish = uninialized_copy(position, finish, new_finish);
			}
			catch () {
				destroy(new_start, new_finish);//异常，一切恢复原状
				data_allocator::deallocator(new_start, len);
				throw;
			}
			destroy(begin(), end());//释放原空间
			deallocate();
			start = new_start;
			finish = new_finish;
			end_of_storage = start + len;
		}
	}

	iterator start;//已用空间头
	iterator finish;//已用空间尾
	iterator end_of_storage;//可用空间尾
};
template <typename T,typename Alloc>
void vector<T,Alloc>::insert(iterator positon, value_type n, const T& x)
{
	if (n != 0) {
		if (size_type(end_of_storage - finish) >= n) {
			//备用空间充足
			T x_copy = x;
			const size_type elem_after = finish - position;//插入点之后元素个数
			iterator old_finish = finish;
			if (elem_after > n) {
				//插入点之后元素个数大于待插入个数，看图，假设要插入2个，而插入点之后有3个元素，剩余空间有2个
				uninialized_copy(finish - n, finish, finish);//看图，把最后两个元素往剩余空间放
				finish += n;//新的finish往最后一个元素放
				copy_backword(position, old_finish - n, old_finish);//插入点之后还有单独一个元素，往后补空
				fill(position, positon + n, x_copy);//这时空出两个位置正好插入2个新元素
			}
			else {
				//插入点之后元素个数小于待插入个数，看图插入点之后2个元素，待插入3个，备用空间3个
				uninialized_fill_n(finish, n - elem_after, x_copy);//先在后面插入3-2个待插入元素x
				finish += n - elem_after;//新finish往后移1个
				uninialized_copy(position, old_finish, finish);//插入点到老结尾的2个元素放到新finish也就是最后面
				finish += elem_ater;//新finish放到最后面
				fill(position, old_finish, x_copy);//这时待插入点后面空出2个位置将待插入的剩余的2个x插入
			}
		}
		else {
			//备用空间不够，看图，备用空间2，待插入3，插入点之后有3个元素
			const size_type old_size = size();
			const size_type len = old_size + max(old_size, n);
			iterator new_start = data_allocator::allocate(len);//配置新空间
			iterator new_finish = new_start;
			__STL_TRY{
				new_finish = uninialized_copy(start,position,new_start);//现将插入点之前元素放到新空间，并将新finish放到最后一个元素
				new_finish = uninialized_fill_n(new_finish, n, x);//往后面插入3个待添加元素
				new_finish = uninialized_copy(position, finish, new_finish);//把插入点之后元素放到新空间后面
			}
#ifdef __STL_USE_EXCEPTIONS
				catch () {
				destroy(new_start, new_finish);
				data_allocator::dealllocate(new_start, len);
				throw;
			}
#endif
			//收尾
			destroy(start, finish);
			deallocate();
			start = new_start;
			finish = new_finish;
			end_of_storage = start + len;
		}
	}
}
